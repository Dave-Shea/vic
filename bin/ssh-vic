#!/bin/sh

# ssh(1) wrapper to forward AWS Auth secrets via ssh session ENV.
#
# Depends on values in '~/.vic/aws_private.conf'
# This config file can be safely generated by admins using the vic
# tooling, e.g. on your laptop,
#    $ vic config-admin
# and follow the instructions.
#
###########################################################
#   WARNING: remote shell will carry AWS secrets in ENV.  #
###########################################################
#
# Intended to Prevnet AWS access keys from being written to shared
# hosts, enforcing behavior much like ssh-agent(1).  Downside,
# loading to ENV on remote host can have consequences.
#
# Remote host sshd_conf must contain the line:
#
#   AcceptEnv VIC_AWS_ACCESS_KEY_ID VIC_AWS_SECRET_ACCESS_KEY VIC_AWS_DEFAULT_REGION


yell() { echo "$0: $*" >&2; }
die() { yell "$*"; exit 111; }
try() { "$@" || die "cannot $*"; }

debug() { [ -n "$DEBUG" ] && echo "$*" >&2; }
chirp() { echo "$*" >&2; }

usage() {
# accepts 1 user message as string
fd="${fd:-2}" # stderr
ec="${ec:-5}" # Input/output error
try cat - 1>&$fd << EOM
`ssh 2>&1`

${0##*/} -- convienence wrapper around ssh to inject AWS vic auth

${1}
EOM
exit "$ec"
}


octalperms() {
# given a file path, returns octal file string
if [ -e "${1}" ] ; then
  try stat -r ${1} | awk '{print $3}' | sed 's/^.*\(.\{4\}\)$/\1/'
fi
}

sourceif() {
# only sources file if it exists,
if [ -r "${1}" ] ; then
  try . "${1}"
  debug "# sourcing config ${1}"
  [ ! -n "$DEBUG" ] || grep -v '^#' "${1}" | grep '.' >&2;
  count=$((count+1)) # keep it portable
else
  debug "# config ${1} does not exist or is not readable by user: `id`"
fi
}


## vars

# Ubuntu is a toy, no POSIX and 'realpath(1)'
if [ -h "${0}" ] ; then
  self="`readlink -f "$0"`"
else
  self="${0}"
fi
  debug "self=${self}"

dothere=$(cd "${self%/*}" 2>/dev/null; echo "`pwd -L`")
  debug "# dothere=$dothere"
myhier="${dothere%/*}"
  debug "# myhier=$myhier"

aws_private_config="${HOME}/.vic/aws_private.conf"
  debug "aws_private_config=${aws_private_config}"
perms_aws_private_config="`octalperms ${aws_private_config}`"
  debug "perms_aws_private_config=${perms_aws_private_config}"
vic_config="${myhier}/etc/vic.conf"
  debug "vic_config=${vic_config}"

## action

# warn if we're already ssh'd to a remote host
# source our local config (do this here, not in vars section)

try . "${vic_config}"
VIC_AWS_DEFAULT_REGION="${VIC_AWS_DEFAULT_REGION:-$aws_default_region}"
  debug "VIC_AWS_DEFAULT_REGION=${VIC_AWS_DEFAULT_REGION}"
  # doing this here for simiper debugging clarity

if [ ! -e "${aws_private_config}" ] ; then
  die "AWS VIC private config does does not exist, '${aws_private_config}', please refer to vic tooling documentation for help setting up AWS creds."
elif [ ${perms_aws_private_config} = 0600 ] ; then
  sourceif "${aws_private_config}"
else
  chirp "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  chirp "@        WARNING: UNPROTECTED PRIVATE CONFIG FILE!        @"
  chirp "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  chirp "Permissions ${perms_aws_private_config} for '${aws_private_config}' are too open."
  chirp "It is required that your private auth files are NOT accessible by others, e.g., 0600."
  die "Aborting."
fi

if [ "${*}" = "" ] ; then
  # ALL arguements get passed through to ssh(1),
  ec=255 usage "Missing arguements for ssh(1)."
fi

# Loads variables to ENV just for the SSH invocation,
VIC_AWS_ACCESS_KEY_ID="${VIC_AWS_ACCESS_KEY_ID}" VIC_AWS_SECRET_ACCESS_KEY="${VIC_AWS_SECRET_ACCESS_KEY}" VIC_AWS_DEFAULT_REGION="${VIC_AWS_DEFAULT_REGION}" try ssh -o SendEnv=VIC_AWS_ACCESS_KEY_ID -o SendEnv=VIC_AWS_SECRET_ACCESS_KEY -o SendEnv=VIC_AWS_DEFAULT_REGION ${*}
